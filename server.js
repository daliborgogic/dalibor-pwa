const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')
const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const bodyParser = require('body-parser')
const remove = require('lodash.remove')
const app = express()
const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8')

const webhookServer = require('./lib/webhook-server')({
  username: process.env.CONTENTFUL_WEBHOOK_USERNAME,
  password: process.env.CONTENTFUL_WEBHOOK_PASSWORD
})

const contentful = require('contentful')
const client = contentful.createClient({
  space: process.env.CONTENTFUL_SPACE,
  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN
})

client.sync({ initial: true })
  .then(response => {
    return new Promise((resolve, reject) => {
      fs.writeFile('public/entries.json', JSON.stringify(response['entries']), (err, data) => {
        if (err) reject(err)
        else resolve(data)
      })
    })
  })
  .catch(err => console.log(err))

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(favicon('./public/img/favicon.ico'))
app.use('/dist', express.static('public'))
app.use(express.static('public'))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.use('/manifest.json', serve('./public/manifest.json'))

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache

function render (req, res) {
  const s = Date.now()

  res.setHeader('Content-Type', 'text/html')

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const cacheable = isCacheable(req)
  if (cacheable) {
    const hit = microCache.get(req.url)
    if (hit) {
      if (!isProd) {
        console.log(`cache hit!`)
      }
      return res.end(hit)
    }
  }

  fs.readFile('public/entries.json', 'utf-8', (err, data) => {
    if (err) console.log(err)
    const context = {
      title: '###',
      description: '####',
      card: '###',
      url: req.url
    }

    renderer.renderToString(context, (err, html) => {
      if (err) {
        return handleError(err)
      }
      res.end(html)
      if (cacheable) {
        microCache.set(req.url, html)
      }
      if (!isProd) {
        console.log(`whole request: ${Date.now() - s}ms`)
      }
    })
  })
}

app.get('*', isProd ? render : (req, res) =>
  readyPromise.then(() => render(req, res))
)

app.use(bodyParser.urlencoded({extended: true}))
app.use(bodyParser.json({type: 'application/*'}))
app.use('/', webhookServer.mountAsMiddleware)

const PORT = process.env.PORT || 5000

app.listen(PORT, () =>
  console.log(`App listening at *:${PORT}`)
)

function writeFile (file, obj) {
  return new Promise((resolve, reject) => {
    fs.writeFile(file, JSON.stringify(obj), 'utf-8', (err, data) => {
      if (err) reject(err)
      else resolve(data)
    })
  })
}

webhookServer.on('ContentManagement.Entry.publish', function (req) {
  console.log('Published')
  return new Promise((resolve, reject) => {
    fs.readFile('public/entries.json', (err, data) => {
      if (err) reject(err)
      let obj = JSON.parse(data)
      obj.push(req.body)
      writeFile('public/entries.json', obj)
      resolve(data)
    })
  })
})

webhookServer.on('ContentManagement.Entry.unpublish', req => {
  console.log('Unpublished')
  return new Promise((resolve, reject) => {
    fs.readFile('public/entries.json', (err, data) => {
      if (err) reject(err)
      let obj = JSON.parse(data)
      remove(obj, e => e.sys.id === req.body.sys.id)
      writeFile('public/entries.json', obj)
      resolve(data)
    })
  })
})

function cleanup () {
  console.log(` Bye .`)
  process.exit(0)
}

// If the Node process ends, cleanup existing connections
process.on('SIGINT', cleanup)
process.on('SIGTERM', cleanup)
process.on('SIGHUP', cleanup)
